---
import { getCollection } from "astro:content";

interface Works {
  id: string;
  slug: string;
  body: string;
  collection: "works";
  data: {
    title: string;
    pubDate: Date;
    description?: string;
    category: string;
    author?: string;
    image?: {
      url: string;
      alt: string;
    };
    tags?: string[];
    draft?: boolean;
  };
}

// Calculate reading time based on words per minute
function calculateReadingTime(text: string, wordsPerMinute = 200): number {
  const words = text.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}

const fetchPosts = async () => {
  const allPosts = await getCollection("works");
  const publishedPosts = allPosts.filter((post: any) => !post.data.draft);
  return publishedPosts
    .sort(
      (a: any, b: any) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
    )
    .slice(0, 10);
};

const posts = await fetchPosts();
---

<div>
  <hr />
  <h2>Latest Works</h2>
  {
    posts.length > 0 ? (
      <ul>
        {posts.map((post: Works) => {
          // Use limitedPosts instead of page.data
          const pubDate = new Date(post.data.pubDate);

          return (
            <li>
              <a
                class="text-white hover:text-white bg-[#080808] border border-[#191919] hover:bg-neutral-900 p-5 rounded"
                href={`/works/${post.slug}`}
              >
                {post.data.title}
              </a>
            </li>
          );
        })}
      </ul>
    ) : (
      <p>There doesn't seem to be any works published yet.</p>
    )
  }
</div>
